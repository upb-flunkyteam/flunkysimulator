plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.10'
    id 'com.google.protobuf' version '0.8.8'

    // Generate IntelliJ IDEA's .idea & .iml project files
    // Starting with 0.8.4 of protobuf-gradle-plugin, *.proto and the gen output files are added
    // to IntelliJ as sources. It is no longer necessary to add them manually to the idea {} block
    // to jump to definitions from Java and Kotlin files.
    // For best results, install the Protobuf and Kotlin plugins for IntelliJ.
    id 'idea'

    // Provide convenience executables for trying out the examples.
    id 'application'

    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

repositories {
    google()
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url 'https://jitpack.io' }
}

// IMPORTANT: You probably want the non-SNAPSHOT version of gRPC. Make sure you
// are looking at a tagged version of the example and not "master"!

// Feel free to delete the comment at the next line. It is just for safely
// updating the version in our release process.
def grpcVersion = '1.28.0' // CURRENT_GRPC_VERSION

dependencies {
    def kotlinVersion = plugins.findPlugin("org.jetbrains.kotlin.jvm").kotlinPluginVersion
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4"

    //grpc
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "javax.annotation:javax.annotation-api:1.2"

    //events
    implementation 'com.github.stuhlmeier:kotlin-events:v2.0'
    //for html escaping of user inputs
    compile group: 'org.springframework', name: 'spring-web', version: '5.2.6.RELEASE'

    //tests
    testImplementation "io.grpc:grpc-testing:${grpcVersion}" // gRCP testing utilities
    testImplementation('org.assertj:assertj-core:3.16.1')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.0')
    testImplementation "io.mockk:mockk:1.10.0"
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.6.0')
}

test {
    useJUnitPlatform()
}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.11.0' }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

sourceSets {
    main {
        proto {
            // In addition to the default 'src/main/proto'
            srcDir '../protocol'
            // In addition to the default '**/*.proto' (use with caution).
            // Using an extension other than 'proto' is NOT recommended,
            // because when proto files are published along with class files, we can
            // only tell the type of a file from its extension.
            include '**/*.protodevel'
        }
    }
}

startScripts.enabled = true
application {
    mainClassName = 'simulator.ServerStarterKt'
}

task stage(dependsOn: ['shadowJar', 'clean'])
shadowJar.mustRunAfter clean
