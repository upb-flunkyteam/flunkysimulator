syntax = "proto3";

package endpoints.flunky.simulator;

import "google/protobuf/empty.proto";

import "game_objects.proto";

option java_multiple_files = true;
option java_outer_classname = "Flunky";
option java_package = "de.flunkyteam.endpoints.projects.simulator";


// A Flunkyball API.
service FlunkyService {

  rpc Throw(ThrowReq) returns (ThrowResp);

  rpc Abgegeben(AbgegebenReq) returns (AbgegebenResp);

  // resets Strafbier counter, Abgaben
  // and plays prepare game clip afterwards
  rpc ResetGame(ResetGameReq) returns (ResetGameResp);

  rpc SelectThrowingPlayer(SelectThrowingPlayerReq) returns (SelectThrowingPlayerResp);

  rpc ModifyStrafbierCount(ModifyStrafbierCountReq) returns (ModifyStrafbierCountResp);

  rpc StreamState(StreamStateReq) returns (stream StreamStateResp);

  // Debug rpcs
  rpc HardReset(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc SetRestingPeriod(RestingPeriodReq) returns (google.protobuf.Empty);
  rpc SetRoundPhase(RoundPhaseReq) returns (google.protobuf.Empty);

}


message StreamStateResp{
  GameState state = 1;
}
message StreamStateReq {}

message SelectThrowingPlayerResp {}
message SelectThrowingPlayerReq{
  string playerName = 1;
  string targetName = 2;
}

message ModifyStrafbierCountResp{}
message ModifyStrafbierCountReq{
  string playerName = 1;
  EnumTeams targetTeam = 2;
  bool increment = 3;
}

message ResetGameResp {}
message ResetGameReq{
  string playerName = 1;
}


message AbgegebenResp{
	EnumAbgegebenRespStatus status = 1;
};
message AbgegebenReq{
  string playerName = 1;
  string targetName = 2;
  bool setTo = 3;
}
enum EnumAbgegebenRespStatus{
  ABGEGEBEN_STATUS_UNKNOWN = 0;
  ABGEGEBEN_STATUS_SUCCESS = 1;
  // Players cant accept a Abgabe of their own team;
  ABGEGEBEN_STATUS_OWN_TEAM = 2;
  // The calling player is not known
  ABGEGEBEN_STATUS_UNKNOWN_JUDGE = 3;
  // The target player is not known
  ABGEGEBEN_STATUS_UNKNOWN_TARGET = 4;
  ABGEGEBEN_STATUS_ERROR = 5;
}

message ThrowReq{
  string playerName = 1;
  EnumThrowStrength strength = 2;
}
message ThrowResp{
  EnumThrowRespStatus status = 1;
}
enum EnumThrowRespStatus{
    THROW_STATUS_UNKNOWN = 0;
    THROW_STATUS_SUCCESS = 1;
    // Did not throw, because calling player is not the throwing player.
    THROW_STATUS_NOT_THROWING_PLAYER = 2;
    // Did not throw, because currently the resting period is active.
    THROW_STATUS_RESTING_PERIOD = 3;
}

// Debug messages
message RestingPeriodReq{
  int64 milliseconds = 1;
}

message RoundPhaseReq{
    EnumRoundPhase roundPhase = 1;
}